version: '3'

services:
  caddy:
    image: lllinglll/micro-caddy:1.0.5
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./caddy_data:/data
      - ./caddy_config:/config
    deploy:
      mode: replicated
      replicas: 1

  front-end:
    image: 'lllinglll/front-end:1.0.5'
    deploy:
      mode: replicated
      replicas: 1
    environment:
      BROKER_URL: "http://backend"

  broker-service:
    image: 'lllinglll/broker-service:1.0.4'
    # ports:
    #   - '8080:80'
    deploy:
      mode: replicated
      replicas: 1
  
  listener-service:
    image: 'lllinglll/listener-service:1.0.0'
    deploy:
      mode: replicated
      replicas: 1
  
  authentication-service:
    image: 'lllinglll/authentication-service:1.0.0'
    deploy:
      mode: replicated
      replicas: 1
    environment:
      DSN: 'host=postgres port=5432 user=postgres password=password dbname=users sslmode=disable timezone=UTC connect_timeout=5'
  
  logger-service:
    image: 'lllinglll/logger-service:1.0.1'
    deploy:
      mode: replicated
      replicas: 1

  mailer-service:
    image: 'lllinglll/mailer-service:1.0.0'
    deploy:
      mode: replicated
      replicas: 1
    environment:
      MAIL_DOMAIN: "localhost"
      MAIL_HOST: "mailhog"
      MAIL_PORT: "1025"
      MAIL_ENCRYPTION: none
      MAIL_USERNAME: ""
      MAIL_PASSWORD: ""
      FROM_NAME: "John Smith"
      FROM_ADDRESS: "john.smith@example.com"
  
  listener-service:
    image: 'lllinglll/listener-service:1.0.0'
    deploy:
      mode: replicated
      replicas: 1

  rabbitmq:
    image: 'rabbitmq:3.9-alpine'
    deploy:
      mode: global
  
  mailhog:
    image: 'mailhog/mailhog:latest'
    ports:
      - '8025:8025'
  
  mongo:
    image: 'mongo:4.2.17-bionic'
    ports:
      - "64001:27017"
    deploy:
      mode: global
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./db-data/mongo:/data/db
  
  postgres:
    image: 'postgres:14.2'
    ports:
      - '5432:5432'
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: users
    volumes:
      - ./db-data/postgres:/var/lib/postgresql/data

volumes:
  caddy_data:
    external: true
  caddy_config:
